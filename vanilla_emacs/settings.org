#+title: Emacs Config File

* Basic UI
  
#+begin_src emacs-lisp 
(setq inhibit-startup-message t)
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)
(load-theme 'tango-dark)
;; (evil-define-key 'normal org-mode-map (kbd "<tab>") 'org-cycle)
(setq vc-follow-symlinks t) ;; Don't promt to follow symlinks

;; Add line numbers
(column-number-mode)
(global-display-line-numbers-mode t)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

;; Rainbow Delimiters
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode)) 
#+end_src


** TODO test

*** WAITING Babel
 #+begin_src emacs-lisp :eval yes 
 (setq org-confirm-babel-evaluate 'nil)
 #+end_src


* Key Bindings
** Evil Mode
#+begin_src emacs-lisp 
;; Evil mode
(use-package evil
  :init
  (setq evil-want-integration nil)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll nil)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
  
;; Setup Undo tree
(use-package undo-tree
  :ensure t)
(global-undo-tree-mode)
(evil-set-undo-system 'undo-tree)
#+end_src
** Vim-based window navigation
#+begin_src emacs-lisp 
  (global-set-key (kbd "C-j") 'evil-window-down) 
  (global-set-key (kbd "C-k") 'evil-window-up)
  (global-set-key (kbd "C-h") 'evil-window-left)
  (global-set-key (kbd "C-l") 'evil-window-right)

  ;; Navigate buffers by skipping internal ones (e.g. *Messages*, *scratch*, etc.)
  (defun next-code-buffer ()
  (interactive)
  (let (( bread-crumb (buffer-name) ))
    (next-buffer)
    (while
        (and
         (string-match-p "^\*" (buffer-name))
         (not ( equal bread-crumb (buffer-name) )) )
      (next-buffer))))
  (defun previous-code-buffer ()
  (interactive)
  (let (( bread-crumb (buffer-name) ))
    (previous-buffer)
    (while
        (and
         (string-match-p "^\*" (buffer-name))
         (not ( equal bread-crumb (buffer-name) )) )
      (previous-buffer))))
  (define-key evil-normal-state-map (kbd "H") 'previous-code-buffer) 
  (define-key evil-normal-state-map (kbd "L") 'next-code-buffer)
;;  (define-key evil-normal-state-map (kbd "C-x C-x") 'kill-this-buffer) 
;;  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
;;  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
;;  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
;;  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
#+end_src

#+RESULTS:
: next-code-buffer

** Shortcuts

#+begin_src emacs-lisp 
;;  (define-key evil-normal-state-map "K" (kbd "<prior>"))
;;  (define-key evil-normal-state-map "J" (kbd "<next>"))
#+end_src


* Code Completion
** Helm completion
#+begin_src emacs-lisp 
(use-package helm
  :ensure t
  :demand
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x b" . helm-buffers-list)
         ("C-x c o" . helm-occur)) ;SC
         ("M-y" . helm-show-kill-ring) ;SC
         ("C-x r b" . helm-filtered-bookmarks) ;SC
  :preface (require 'helm-config)
  :config (helm-mode 1))
#+end_src
  
** Which Key
#+begin_src emacs-lisp 
(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config 
  (setq which-key-idle-delay 0.1))
#+end_src


* Org mode
** Todo
#+begin_src emacs-lisp 
;; Org-babel
(use-package org
  :ensure t
  :config
  (setq org-hide-emphasis-markers nil))
  ;; (define-key evil-normal-state-map (kbd "M-[") 'org-priority-up)
  ;; (define-key evil-normal-state-map (kbd "M-]") 'org-priority-down)
  (define-key global-map (kbd "C-RET") 'org-meta-return)
  ;; Define subtree moving
  ;; (define-key evil-normal-state-map (kbd "M-k") 'org-move-subtree-up)
  ;; (define-key evil-normal-state-map (kbd "M-j") 'org-move-subtree-down)
  ;; Add WAITING state to org-todos
  (setq org-todo-keywords
        '((sequence "TODO" "WAITING" "DONE")))
  ;; Set bullets for lists
 (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
  ;; Add Tags
  (setq org-tag-alist '(("@meeting" . ?m) ("@home" . ?h) ("laptop" . ?l)))
  ;; Customize org priorities
  (setq org-default-priority ?D)
  (setq org-lowest-priority ?E)
  (setq org-highest-priority ?A)
  ;; Colors for priorities
  (setq org-priority-faces '((?A :foreground "red")
    (?B :foreground "yellow")
    (?C :foreground "blue")
    (?E :foreground "green")))
  ;; Set color
  (setq org-agenda-with-colors t)
  ;; Todo state colors
  (setq org-todo-keyword-faces
        '(("WAITING" . "gray")))
  ;; Shortcut for urgent tasks
  (defun todo-set-urgent()
    (interactive)
    (org-priority ?A)
    (org-schedule :SCHEDULED "<today>")
  )
  (define-key global-map (kbd "M-p") 'todo-set-urgent)
#+end_src

** Keybindings                                                     :@meeting:
#+begin_src emacs-lisp 
(evil-define-key 'normal 'org-mode-map 
  "t" 'org-todo
  ",m" (kbd "C-c C-q m RET"))
#+end_src

#+RESULTS:

* TODO Create slides                                               :@meeting:

#+begin_src emacs-lisp :eval yes 
(kbd "m RET")
#+end_src

#+RESULTS:
: m

