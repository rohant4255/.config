#+title: Config File
#+PROPERTY: header-args    :results silent

* Basic UI
#+begin_src emacs-lisp 
(setq inhibit-startup-message t)
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)
(use-package monokai-theme
  :ensure t)
(load-theme 'monokai t)
;; (evil-define-key 'normal org-mode-map (kbd "<tab>") 'org-cycle)
(setq vc-follow-symlinks t) ;; Don't promt to follow symlinks

;; Add line numbers
(column-number-mode)
(global-display-line-numbers-mode t)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

;; Rainbow Delimiters
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode)) 

;; Save previous place
(save-place-mode 1)
#+end_src

* Key Bindings
** Evil Mode
#+begin_src emacs-lisp 
;; Evil mode
(use-package evil
  :init
  (setq evil-want-integration nil)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll nil)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
  
;; Setup Undo tree
(use-package undo-tree
  :ensure t)
(global-undo-tree-mode)
(evil-set-undo-system 'undo-tree)
#+end_src
** Vim-based window navigation
#+begin_src emacs-lisp 
  (global-set-key (kbd "C-j") 'evil-window-down) 
  (global-set-key (kbd "C-k") 'evil-window-up)
  (global-set-key (kbd "C-h") 'evil-window-left)
  (global-set-key (kbd "C-l") 'evil-window-right)

  ;; Navigate buffers by skipping internal ones (e.g. *Messages*, *scratch*, etc.)
  (defun next-code-buffer ()
  (interactive)
  (let (( bread-crumb (buffer-name) ))
    (next-buffer)
    (while
        (and
         (string-match-p "^\*" (buffer-name))
         (not ( equal bread-crumb (buffer-name) )) )
      (next-buffer))))
  (defun previous-code-buffer ()
  (interactive)
  (let (( bread-crumb (buffer-name) ))
    (previous-buffer)
    (while
        (and
         (string-match-p "^\*" (buffer-name))
         (not ( equal bread-crumb (buffer-name) )) )
      (previous-buffer))))
  (define-key evil-normal-state-map (kbd "H") 'previous-code-buffer) 
  (define-key evil-normal-state-map (kbd "L") 'next-code-buffer)
  (define-key evil-normal-state-map (kbd "C-x C-x") 'kill-this-buffer) 
#+end_src

** Shortcuts

#+begin_src emacs-lisp 
  (define-key evil-normal-state-map "K" (kbd "<prior>"))
  (define-key evil-normal-state-map "J" (kbd "<next>"))
#+end_src

* Code Completion
** Helm completion
#+begin_src emacs-lisp 
(use-package helm
  :ensure t
  :demand
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x b" . helm-buffers-list)
         ("C-x c o" . helm-occur)) ;SC
         ("M-y" . helm-show-kill-ring) ;SC
         ("C-x r b" . helm-filtered-bookmarks) ;SC
  :preface (require 'helm-config)
  :config (helm-mode 1))
#+end_src
  
** Company
#+begin_src emacs-lisp 
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 1)
    (global-company-mode t)
    (add-to-list 'company-backends 'company-elisp))
#+end_src

** LSP mode
#+begin_src emacs-lisp 
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (python-mode . lsp)
         (elisp-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
;; (use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src
** Copilot 
#+begin_src emacs-lisp
;; (use-package copilot
;;   :straight (:host github :repo "zerolfx/copilot.el"
;;                    :files ("dist" "copilot.el"))
;;   :ensure t)
#+end_src
** Which Key
#+begin_src emacs-lisp 
(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config 
  (setq which-key-idle-delay 0.1))
#+end_src

* Org mode
** Todo
#+begin_src emacs-lisp 
;; Org-babel
(use-package org
  :ensure t
  :config
  (setq org-hide-emphasis-markers nil))
  ;; (define-key evil-normal-state-map (kbd "M-[") 'org-priority-up)
  ;; (define-key evil-normal-state-map (kbd "M-]") 'org-priority-down)
  (define-key global-map (kbd "C-RET") 'org-meta-return)
  ;; Define subtree moving
  (define-key evil-normal-state-map (kbd "M-k") 'org-move-subtree-up)
  (define-key evil-normal-state-map (kbd "M-j") 'org-move-subtree-down)
  ;; Add WAITING state to org-todos
  (setq org-todo-keywords
        '((sequence "TODO" "WAITING" "DONE")))
  ;; Set bullets for lists
 (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
  ;; Add Tags
  (setq org-tag-alist '(("@meeting" . ?m) ("@home" . ?h) ("laptop" . ?l)))
  ;; Customize org priorities
  (setq org-default-priority ?D)
  (setq org-lowest-priority ?E)
  (setq org-highest-priority ?A)
  ;; Colors for priorities
  (setq org-priority-faces '((?A :foreground "red")
    (?B :foreground "yellow")
    (?C :foreground "blue")
    (?E :foreground "green")))
  ;; Set color
  (setq org-agenda-with-colors t)
  ;; Todo state colors
  (setq org-todo-keyword-faces
        '(("WAITING" . "gray")))
  ;; Shortcut for urgent tasks
  (defun todo-set-urgent()
    (interactive)
    (org-priority ?A)
    (org-schedule :SCHEDULED "<today>")
  )
  (define-key global-map (kbd "M-p") 'todo-set-urgent)
#+end_src

** Keybindings
#+begin_src emacs-lisp 
  (define-key global-map (kbd "C-c t") 'org-capture)
  (evil-define-key 'normal 'org-mode-map 
    "t" 'org-todo
    ",n" 'org-toggle-narrow-to-subtree
    ",e" 'org-edit-special
    ",i" 'org-clock-in
    ",o" 'org-clock-out
    "C-c t" 'org-capture
    ",m" (kbd "C-c C-q m RET"))
#+end_src
** Babel
#+begin_src emacs-lisp 
 (setq org-confirm-babel-evaluate 'nil)
#+end_src

** Templates
#+begin_src emacs-lisp 
(use-package org-tempo
  :ensure nil
  :init
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json")))
#+end_src

** UI
#+begin_src emacs-lisp 
(custom-set-faces
 '(org-block-begin-line
   ((t (:background "#272727" :extend t))))
 '(org-block
   ((t (:background "#272727" :extend t))))
 '(org-block-end-line
   ((t (:background "#272727" :extend t))))
 )
 (use-package org-indent
   :ensure nil
   :init
   (add-hook 'org-mode-hook 'org-indent-mode))
 (use-package org-faces
   :ensure nil
   ;; Make sure org-indent face is available
   :after org-indent
   :init
   ;; Increase the size of various headings
   (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
   (dolist (face '((org-level-1 . 1.2)
                   (org-level-2 . 1.1)
                   (org-level-3 . 1.05)
                   (org-level-4 . 1.0)
                   (org-level-5 . 1.1)
                   (org-level-6 . 1.1)
                   (org-level-7 . 1.1)
                   (org-level-8 . 1.1)))
     (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))
 
   ;; Ensure that anything that should be fixed-pitch in Org files appears that way
   (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
   (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
   (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
   (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
 
   ;; Get rid of the background on column views
   (set-face-attribute 'org-column nil :background nil)
   (set-face-attribute 'org-column-title nil :background nil))
#+end_src
** Capture Templates
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src
* Tasks
** DONE Fix evil-normal-state-map error
** DONE Add auto-completion
** DONE Background for babel
** DONE Make modeline look good
** Org mode shortcuts
*** DONE Clock in and out
*** TODO Capture template
** TODO Org agenda views
** TODO C++ completion and code navigation
