#+title: Emacs Config File
#+HEADER: :tangle yes 

* Basic UI
  
#+begin_src emacs-lisp 
(setq inhibit-startup-message t)
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)            ; Disable the menu bar

(setq vc-follow-symlinks t) ;; Don't promt to follow symlinks

;; Sublime text theme
(use-package monokai-theme
  :ensure t
  :config
  (load-theme 'monokai t))

;; Add line numbers
(global-linum-mode 1)

;; Rainbow Delimiters
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode)) 

;; Completion
(use-package company
  :ensure t
  :init
  (setq company-idle-delay 0
  company-minimum-prefix-length 1
  company-tooltip-limit 10)
  :config
  (global-company-mode t))

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))

;; Modeline 
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
(use-package all-the-icons
  :ensure t)
(setq doom-modeline-height 25)

;; Autosave
(setq auto-save-default t)

#+end_src


* Key Bindings
** Evil Mode
#+begin_src emacs-lisp 
;; Evil mode
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll nil)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src
** Vim-based window navigation
#+begin_src emacs-lisp 
  (global-set-key (kbd "C-j") 'evil-window-down) 
  (global-set-key (kbd "C-k") 'evil-window-up)
  (global-set-key (kbd "C-h") 'evil-window-left)
  (global-set-key (kbd "C-l") 'evil-window-right)
  (define-key evil-normal-state-map (kbd "H") 'previous-buffer) 
  (define-key evil-normal-state-map (kbd "L") 'next-buffer)
;;  (define-key evil-normal-state-map (kbd "C-x C-x") 'kill-this-buffer) 
;;  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
;;  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
;;  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
;;  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
#+end_src

** Shortcuts
#+begin_src emacs-lisp 
  ;;  (define-key evil-normal-state-map "K" (kbd "<prior>"))
  ;;  (define-key evil-normal-state-map "J" (kbd "<next>"))
#+end_src


* Code Completion
** Helm completion
#+begin_src emacs-lisp 
;; (use-package helm
;;   :ensure t
;;   :demand
;;   :bind (("M-x" . helm-M-x)
;;          ("C-x C-f" . helm-find-files)
;;          ("C-x b" . helm-buffers-list)
;;          ("C-x c o" . helm-occur)) ;SC
;;          ("M-y" . helm-show-kill-ring) ;SC
;;          ("C-x r b" . helm-filtered-bookmarks) ;SC
;;   :preface (require 'helm-config)
;;   :config (helm-mode 1))
#+end_src
  
** Which Key
#+begin_src emacs-lisp 
(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config 
  (setq which-key-idle-delay 0.1))
#+end_src


* [#D] Org mode
#+begin_src emacs-lisp 
;; Org-babel
(use-package org
  :ensure t
  :config
  (setq org-hide-emphasis-markers nil))

(define-key evil-normal-state-map (kbd "M-[") 'org-priority-up)
(define-key evil-normal-state-map (kbd "M-]") 'org-priority-down)
(define-key global-map (kbd "C-RET") 'org-meta-return)
;; Define subtree moving
(define-key evil-normal-state-map (kbd "M-k") 'org-move-subtree-up)
(define-key evil-normal-state-map (kbd "M-j") 'org-move-subtree-down)
;; Add WAITING state to org-todos
(setq org-todo-keywords
'((sequence "TODO" "WAITING" "DONE")))
;; Set keybinding for todo state toggle "t" in normal mode of evil
(define-key evil-normal-state-map (kbd "t") 'org-todo)
;; Set keybinding for inserting date --> ", ." in normal mode of evil
(define-key evil-normal-state-map (kbd ", .") 'org-time-stamp)
;; Set keybinding for inserting deadline --> ", ." in normal mode of evil
(define-key evil-normal-state-map (kbd ", d") 'org-deadline)
;; Export to pdf for beamer
(define-key evil-normal-state-map (kbd ", e") 'org-beamer-export-to-pdf)
;; Archive
(define-key evil-normal-state-map (kbd ", a") 'org-archive-subtree)
;; Schedule
(define-key evil-normal-state-map (kbd ", s") 'org-schedule)
;; Set bullets for lists
(use-package org-bullets
   :hook (org-mode . org-bullets-mode))
;; Add Tags
(setq org-tag-alist '(("@meeting" . ?m) ("@home" . ?h) ("laptop" . ?l)))
;; Customize org priorities
(setq org-default-priority ?D)
(setq org-lowest-priority ?E)
(setq org-highest-priority ?A)
;; Colors for priorities
(setq org-priority-faces '((?A :foreground "red")
  (?B :foreground "yellow")
  (?C :foreground "blue")
  (?E :foreground "green")))
;; Set color
(setq org-agenda-with-colors t)
;; Todo state colors
(setq org-todo-keyword-faces
'(("WAITING" . "gray")))
;; Shortcut for urgent tasks
(defun todo-set-urgent()
  (interactive)
  (org-priority ?A)
  (org-schedule :SCHEDULED "<today>")
)
(define-key global-map (kbd "M-p") 'todo-set-urgent)

;; Setup Undo tree
(use-package undo-tree
  :ensure t)
(global-undo-tree-mode)
(evil-set-undo-system 'undo-tree)
;;(set-undo-system

;; Petty priorities
(use-package org-fancy-priorities
  :ensure t
  :diminish
  :hook (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list 
  (list (propertize "!" 'face '(:height 1.5 :weight bold))
	(propertize "⬆" 'face '(:height 1.5))
	(propertize "⬇" 'face '(:height 1.5))
	(propertize "☕" 'face '(:height 1.5)))))
  
;; Inserting images
(use-package xclip
  :ensure t
  :config
  (xclip-mode 1))

(use-package org-download
  :ensure t
  :after org
  :bind (:map org-mode-map
   ("C-c s" . org-download-clipboard)))

;; Inline images
(setq org-image-actual-width nil)
(with-eval-after-load 'org
  (define-key org-mode-map (kbd ", i") 'org-toggle-inline-images))


;; Open files externally
(setq org-file-apps
(append '((auto-mode . emacs)
	  ("\\.mm\\'" . default)
	  ("\\.x?html?\\'" . default)
	  ("\\.pdf\\'" . "evince %s")
	  ("\\.png\\'" . "eog %s")
	  ("\\.jpg\\'" . "eog %s")
	  ("\\.jpeg\\'" . "eog %s")
	  ("\\.gif\\'" . "eog %s"))
	org-file-apps))

;; Capture template
(setq org-capture-templates
'(("t" "Todo" entry (file "~/Dropbox/Documents/Orgzly/inbox.org")
   "* TODO %?\n")))
;; Disable bable confirmation
(setq org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS:

* Org agenda

#+begin_src emacs-lisp 
(setq org-agenda-files '("~/Dropbox/Documents/Orgzly"))
(setq org-agenda-custom-commands
'(("c" "Custom Agenda View"
   ((agenda "" ((org-agenda-span 1)
	  (org-agenda-overriding-header "\nScheduled Tasks for Today (excluding WAITING)\n----------------------------")
	  (org-agenda-skip-function
	   '(or (org-agenda-skip-entry-if 'todo '("WAITING"))
		(org-agenda-skip-entry-if 'nottodo 'todo)))))
    (tags-todo "+PRIORITY=\"A\"-SCHEDULED>=\"<today>\"-TODO=\"WAITING\""
	 ((org-agenda-overriding-header "\nHigh Priority Tasks (excluding WAITING)\n-------------------")
	  (org-agenda-sorting-strategy '(priority-down))))
    (agenda "" ((org-agenda-span 3)
	  (org-agenda-start-on-weekday nil)
	  (org-agenda-start-day "+1d")
	  (org-agenda-overriding-header "\nNext Few Days Scheduled Tasks (excluding WAITING)\n------------------------------")
	  (org-agenda-skip-function
	   '(or (org-agenda-skip-entry-if 'todo '("WAITING"))
		(org-agenda-skip-entry-if 'deadline 'todo '("DONE"))))))
    (tags-todo "TODO=\"WAITING\""
	 ((org-agenda-overriding-header "\nTasks in WAITING State\n-----------------------")))
   ))))
(global-set-key (kbd "C-c a") (lambda () (interactive) (org-agenda nil "c")))

(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

#+RESULTS:
| my/org-agenda-mode-setup |
